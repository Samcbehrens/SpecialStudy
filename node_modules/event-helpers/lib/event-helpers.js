"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Returns a decorator that will be called if the predicate passes.
 */
exports.ifFn = ifFn;

/**
 * True if no modifiers were depressed (ctrl, shift, alt, meta)
 */
exports.isUnmodified = isUnmodified;

/**
 * True only for unmodified left clicks.
 */
exports.isLeftClick = isLeftClick;

/**
 * Same as isLeftClick, but works on the second argument.
 */
exports.isLeftClick2 = isLeftClick2;
exports.killEvent = killEvent;

/**
 * True if the event key is one of the arguments that were passed in.
 *
 * Usage:
 *
 *    var isEnter = isKeyOf(['Enter']);
 *    var isDigit = isKeyOf('1234567890'.split(''));
 */
exports.isKeyOf = isKeyOf;
exports.ifKeyOf = ifKeyOf;
/**
 * event-helpers
 */

var makeDecorator = require("makedecorator");
function ifFn(predicate) {
  return makeDecorator(function (fn) {
    return function () {
      if (predicate.apply(this, arguments)) {
        return fn.apply(this, arguments);
      }
    };
  });
}

function isUnmodified(event) {
  return !event.altKey && !event.ctrlKey && !event.shiftKey && !event.metaKey;
}

function isLeftClick(event) {
  return event.button === 0 && isUnmodified(event);
}

function isLeftClick2(_, event) {
  return isLeftClick(event);
}

var ifLeftClick = ifFn(isLeftClick);
exports.ifLeftClick = ifLeftClick;
var ifLeftClick2 = ifFn(isLeftClick2);

exports.ifLeftClick2 = ifLeftClick2;

function killEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}

var killLeftClickEvent = ifLeftClick(killEvent);exports.killLeftClickEvent = killLeftClickEvent;

function isKeyOf(whichValues) {
  if (!Array.isArray(whichValues)) {
    throw new TypeError("isKeyOf expects an array");
  }
  return function (event) {
    return whichValues.indexOf(event.key) !== -1;
  };
}

function ifKeyOf(whichValues) {
  return ifFn(isKeyOf(whichValues));
}